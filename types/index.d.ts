/**
 * This file is auto-generated by the build script.
 * It consolidates API type declarations for use in the application.
 * Do not edit manually.
 */
import type _edge_add from './edge/add';
import type _edge_addMultiple from './edge/addMultiple';
import type _edge_addToSuperNode from './edge/addToSuperNode';
import type _edge_convertToSuperNode from './edge/convertToSuperNode';
import type _edge_delete from './edge/delete';
import type _edge_deleteFromSuperNode from './edge/deleteFromSuperNode';
import type _edge_deleteMultiple from './edge/deleteMultiple';
import type _edge_getMultiple from './edge/getMultiple';
import type _edge_search from './edge/search';
import type _kv_add from './kv/add';
import type _kv_addMultiple from './kv/addMultiple';
import type _kv_delete from './kv/delete';
import type _kv_deleteMultiple from './kv/deleteMultiple';
import type _kv_get from './kv/get';
import type _kv_getMultiple from './kv/getMultiple';
import type _vertex_add from './vertex/add';
import type _vertex_addMultiple from './vertex/addMultiple';
import type _vertex_delete from './vertex/delete';
import type _vertex_deleteMultiple from './vertex/deleteMultiple';
import type _vertex_get from './vertex/get';
import type _vertex_getMultiple from './vertex/getMultiple';


declare const _default: {
    edge: {
        /**
         * Adds a single item by wrapping it in an array and passing it to the addMultiple function.
         *
         * @param {Object} item - The item to be added, represented as an array [vertex1, edgeType, vertex2].
         * 
         * @returns {Promise<Object>} A promise that resolves to the added item.
         *
         * @example
         * const item = ['vertex1', 'edgeType', 'vertex2'];
         * add(item).then(addedItem => {
         *   console.log(addedItem);
         * });
         */
        add: typeof _edge_add,
        addMultiple: typeof _edge_addMultiple,
        addToSuperNode: typeof _edge_addToSuperNode,
        convertToSuperNode: typeof _edge_convertToSuperNode,
        delete: typeof _edge_delete,
        deleteFromSuperNode: typeof _edge_deleteFromSuperNode,
        deleteMultiple: typeof _edge_deleteMultiple,
        getMultiple: typeof _edge_getMultiple,
        search: typeof _edge_search,
    },
    kv: {
        add: typeof _kv_add,
        addMultiple: typeof _kv_addMultiple,
        delete: typeof _kv_delete,
        deleteMultiple: typeof _kv_deleteMultiple,
        get: typeof _kv_get,
        getMultiple: typeof _kv_getMultiple,
    },
    vertex: {
        add: typeof _vertex_add,
        addMultiple: typeof _vertex_addMultiple,
        delete: typeof _vertex_delete,
        deleteMultiple: typeof _vertex_deleteMultiple,
        get: typeof _vertex_get,
        getMultiple: typeof _vertex_getMultiple,
    },
};

export default _default;
